//-----------------------------------------------------------------------
// <summary>
// Autogenerated table class
// </summary>
// <auto-generated />
//-----------------------------------------------------------------------

#nullable enable

namespace dbstructs.test
{
    /// <summary>Table structure for sample.</summary>
    [System.CodeDom.Compiler.GeneratedCode("Cave.Data.TableInterfaceGenerator", null)]
    [Cave.Data.Table("sample")]
    public partial struct DefaultSampleRow : IEquatable<DefaultSampleRow>, Cave.Data.ICanGetValues
    {
        /// <summary>Converts the string representation of a row to its DefaultSampleRow equivalent.</summary>
        /// <param name="data">A string that contains a row to convert.</param>
        /// <returns>A new DefaultSampleRow instance.</returns>
        public static DefaultSampleRow Parse(string data) => Parse(data, System.Globalization.CultureInfo.InvariantCulture);

        /// <summary>Converts the string representation of a row to its DefaultSampleRow equivalent.</summary>
        /// <param name="data">A string that contains a row to convert.</param>
        /// <param name="provider">The format provider (optional).</param>
        /// <returns>A new DefaultSampleRow instance.</returns>
        public static DefaultSampleRow Parse(string data, IFormatProvider provider) => Cave.Data.CsvReader.ParseRow<DefaultSampleRow>(data, provider);

        /// <summary>[ID, AutoIncrement] long Id</summary>
        /// <remarks>Id field</remarks>
        [System.ComponentModel.Description("Id field")]
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.ID | Cave.Data.FieldFlags.AutoIncrement)]
        public long Id;

        /// <summary>byte[] Blob</summary>
        [Cave.Data.Field()]
        public byte[] Blob;

        /// <summary>byte Byte</summary>
        [Cave.Data.Field()]
        public byte Byte;

        /// <summary>short Short</summary>
        [Cave.Data.Field()]
        public short Short;

        /// <summary>int Int</summary>
        [Cave.Data.Field()]
        public int Int;

        /// <summary>long Long</summary>
        [Cave.Data.Field()]
        public long Long;

        /// <summary>TimeSpan Native Duration</summary>
        [Cave.Data.Field()]
        [Cave.Data.DateTimeFormat(DateTimeKind.Unspecified, Cave.Data.DateTimeType.Native)]
        public TimeSpan Duration;

        /// <summary>bool Enabled (4)</summary>
        [Cave.Data.Field(Length = 4)]
        public bool Enabled;

        /// <summary>Guid Guid</summary>
        [Cave.Data.Field()]
        public Guid Guid;

        /// <summary>sbyte SByte</summary>
        [Cave.Data.Field(Name = "SByte")]
        public sbyte Sbyte;

        /// <summary>ushort UShort</summary>
        [Cave.Data.Field(Name = "UShort")]
        public ushort Ushort;

        /// <summary>uint UInt</summary>
        [Cave.Data.Field(Name = "UInt")]
        public uint Uint;

        /// <summary>ulong ULong</summary>
        [Cave.Data.Field(Name = "ULong")]
        public ulong Ulong;

        /// <summary>UTF8 UTF8 Text (30)</summary>
        [Cave.Data.Field(Length = 30)]
        [Cave.Data.StringFormat(Cave.IO.StringEncoding.UTF8)]
        public Cave.UTF8 Text;

        /// <summary>string UTF8 String</summary>
        [Cave.Data.Field()]
        [Cave.Data.StringFormat(Cave.IO.StringEncoding.UTF8)]
        public string String;

        /// <summary>DateTime Native Timestamp</summary>
        [Cave.Data.Field()]
        [Cave.Data.DateTimeFormat(DateTimeKind.Unspecified, Cave.Data.DateTimeType.Native)]
        public DateTime Timestamp;

        /// <summary>Uri UTF8 Uri</summary>
        [Cave.Data.Field()]
        [Cave.Data.StringFormat(Cave.IO.StringEncoding.UTF8)]
        public System.Uri Uri;

        /// <summary>[Nullable] byte[]?  NullableBlob</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        public byte[]? NullableBlob;

        /// <summary>[Nullable] byte?  NullableByte</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        public byte? NullableByte;

        /// <summary>[Nullable] short?  NullableShort</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        public short? NullableShort;

        /// <summary>[Nullable] int?  NullableInt</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        public int? NullableInt;

        /// <summary>[Nullable] long?  NullableLong</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        public long? NullableLong;

        /// <summary>[Nullable] TimeSpan?  Native NullableDuration</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        [Cave.Data.DateTimeFormat(DateTimeKind.Unspecified, Cave.Data.DateTimeType.Native)]
        public TimeSpan? NullableDuration;

        /// <summary>[Nullable] bool?  NullableEnabled</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        public bool? NullableEnabled;

        /// <summary>[Nullable] Guid?  NullableGuid</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        public Guid? NullableGuid;

        /// <summary>[Nullable] sbyte?  NullableSByte</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable, Name = "NullableSByte")]
        public sbyte? NullableSbyte;

        /// <summary>[Nullable] ushort?  NullableUShort</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable, Name = "NullableUShort")]
        public ushort? NullableUshort;

        /// <summary>[Nullable] uint?  NullableUInt</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable, Name = "NullableUInt")]
        public uint? NullableUint;

        /// <summary>[Nullable] ulong?  NullableULong</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable, Name = "NullableULong")]
        public ulong? NullableUlong;

        /// <summary>[Nullable] UTF8?  UTF8 NullableText (30)</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable, Length = 30)]
        [Cave.Data.StringFormat(Cave.IO.StringEncoding.UTF8)]
        public Cave.UTF8? NullableText;

        /// <summary>[Nullable] DateTime?  Native NullableTimestamp</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        [Cave.Data.DateTimeFormat(DateTimeKind.Unspecified, Cave.Data.DateTimeType.Native)]
        public DateTime? NullableTimestamp;

        /// <summary>[Nullable] string?  UTF8 NullableString</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        [Cave.Data.StringFormat(Cave.IO.StringEncoding.UTF8)]
        public string? NullableString;

        /// <summary>[Nullable] Uri?  UTF8 NullableUri</summary>
        [Cave.Data.Field(Flags = Cave.Data.FieldFlags.Nullable)]
        [Cave.Data.StringFormat(Cave.IO.StringEncoding.UTF8)]
        public System.Uri? NullableUri;

        /// <summary>Gets a string representation of this row.</summary>
        /// <returns>Returns a string that can be parsed by <see cref="Parse(string)"/>.</returns>
        public override string ToString() => ToString(System.Globalization.CultureInfo.InvariantCulture);

        /// <summary>Gets a string representation of this row.</summary>
        /// <returns>Returns a string that can be parsed by <see cref="Parse(string, System.IFormatProvider)"/>.</returns>
        public string ToString(System.IFormatProvider provider) => Cave.Data.CsvWriter.RowToString(this, provider);

        /// <summary>Gets an array containing the values of all fields of this row</summary>
        /// <returns>Returns a new array instance.</returns>
        public object?[] GetValues() => [Id, Blob, Byte, Short, Int, Long, Duration, Enabled, Guid, Sbyte, Ushort, Uint, Ulong, Text, String, Timestamp, Uri, NullableBlob, NullableByte, NullableShort, NullableInt, NullableLong, NullableDuration, NullableEnabled, NullableGuid, NullableSbyte, NullableUshort, NullableUint, NullableUlong, NullableText, NullableTimestamp, NullableString, NullableUri];

        /// <summary>Gets the hash code based on all fields of this row.</summary>
        /// <remarks>Hashes are created using <see cref="Cave.DefaultHashingFunction"/>. This is done because hashing in .net is not deterministic.
        /// You can use your own hashing algorithm by changing <see cref="Cave.DefaultHashingFunction.Create"/> to your own instance.</remarks>
        /// <returns>A hash code for all fields of this row.</returns>
        public override int GetHashCode() => Cave.DefaultHashingFunction.Calculate(GetValues());

        /// <inheritdoc/>
        public override bool Equals(object? other) => other is DefaultSampleRow row && Equals(row);

        /// <inheritdoc/>
        public bool Equals(DefaultSampleRow other)
        {
            return
                object.Equals(other.Id, Id) &&
                Cave.Collections.DefaultComparer.Equals(other.Blob, Blob) &&
                object.Equals(other.Byte, Byte) &&
                object.Equals(other.Short, Short) &&
                object.Equals(other.Int, Int) &&
                object.Equals(other.Long, Long) &&
                object.Equals(other.Duration, Duration) &&
                object.Equals(other.Enabled, Enabled) &&
                object.Equals(other.Guid, Guid) &&
                object.Equals(other.Sbyte, Sbyte) &&
                object.Equals(other.Ushort, Ushort) &&
                object.Equals(other.Uint, Uint) &&
                object.Equals(other.Ulong, Ulong) &&
                object.Equals(other.Text, Text) &&
                Cave.Collections.DefaultComparer.Equals(other.String, String) &&
                object.Equals(other.Timestamp, Timestamp) &&
                object.Equals(other.Uri, Uri) &&
                Cave.Collections.DefaultComparer.Equals(other.NullableBlob, NullableBlob) &&
                object.Equals(other.NullableByte, NullableByte) &&
                object.Equals(other.NullableShort, NullableShort) &&
                object.Equals(other.NullableInt, NullableInt) &&
                object.Equals(other.NullableLong, NullableLong) &&
                object.Equals(other.NullableDuration, NullableDuration) &&
                object.Equals(other.NullableEnabled, NullableEnabled) &&
                object.Equals(other.NullableGuid, NullableGuid) &&
                object.Equals(other.NullableSbyte, NullableSbyte) &&
                object.Equals(other.NullableUshort, NullableUshort) &&
                object.Equals(other.NullableUint, NullableUint) &&
                object.Equals(other.NullableUlong, NullableUlong) &&
                object.Equals(other.NullableText, NullableText) &&
                object.Equals(other.NullableTimestamp, NullableTimestamp) &&
                Cave.Collections.DefaultComparer.Equals(other.NullableString, NullableString) &&
                object.Equals(other.NullableUri, NullableUri);
        }
    }
}
