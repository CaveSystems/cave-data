using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Collections;
using Cave.Collections.Generic;


namespace Cave.Data;

/// <summary>Code generator for ITable or RowLayout instances.</summary>
public class TableInterfaceGenerator
{
    #region Private Methods

    string GetName(string text) => NamingStrategy.GetNameByStrategy(text);

    #endregion Private Methods

    #region Public Properties

    /// <summary>Gets or sets the name of the class to generate. Optional.</summary>
    public string? ClassName { get; set; }

    /// <summary>Gets or sets the database name (only used for the structure name). Required!</summary>
    public string? DatabaseName { get; set; }

    /// <summary>Gets or sets the <see cref="RowLayout"/> to be used for the structure. Required!</summary>
    public RowLayout? Layout { get; set; }

    /// <summary>The namespace to use for the class (defaults to <see cref="DatabaseName"/>). Optional. Default = "Database".</summary>
    public string? NameSpace { get; set; }

    /// <summary>Gets or sets the naming strategy for classes, properties, structures and fields. Optional. Default = <see cref="NamingStrategy.PascalCase"/>.</summary>
    public NamingStrategy NamingStrategy { get; set; } = NamingStrategy.PascalCase;

    /// <summary>Options for code generation.</summary>
    public InterfaceGeneratorOptions Options { get; set; } = new();
    /// <summary>Gets or sets the table name (only used for the structure name). Optional. Default = <see cref="Layout"/>.Name.</summary>
    public string? TableName { get; set; }

    #endregion Public Properties

    #region Public Methods

    /// <returns>Returns a string containing csharp code.</returns>
    public GenerateTableCodeResult GenerateStruct()
    {
        if (Layout == null)
        {
            throw new ArgumentNullException(nameof(Layout));
        }
        var generator = typeof(TableInterfaceGenerator);

        NameSpace ??= "Database";
        TableName ??= Layout.Name;

        var fieldNameLookup = new Dictionary<int, string>();
        var idCount = Layout.Identifier.Count();
        var idFields = (idCount == 0 ? Layout : Layout.Identifier).ToList();
        var code = new StringBuilder();
        code.AppendLine("//-----------------------------------------------------------------------");
        code.AppendLine("// <summary>");
        code.AppendLine("// Autogenerated table class");
        code.AppendLine("// </summary>");
        code.AppendLine("// <auto-generated />");
        code.AppendLine("//-----------------------------------------------------------------------");
        code.AppendLine();
        code.AppendLine("#nullable enable");

        if (DatabaseName == null)
        {
            throw new ArgumentNullException(nameof(DatabaseName));
        }

        #region Build lookup tables

        void BuildLookupTables()
        {
            var uniqueFieldNames = new IndexedSet<string>();
            foreach (var field in Layout)
            {
                var sharpName = GetName(field.Name);
                var i = 0;
                while (uniqueFieldNames.Contains(sharpName))
                {
                    sharpName = GetName(field.Name) + ++i;
                }

                uniqueFieldNames.Add(sharpName);
                fieldNameLookup[field.Index] = sharpName;
            }
        }

        BuildLookupTables();

        #endregion

        ClassName ??= GetName(DatabaseName) + GetName(TableName) + "Row";

        code.AppendLine();
        code.AppendLine($"namespace {NameSpace}");
        code.AppendLine("{");
        code.AppendLine($"\t/// <summary>Table structure for {Layout.Name}.</summary>");
        if (Options.VersionHeader)
        {
            code.AppendLine($"\t[System.CodeDom.Compiler.GeneratedCode(\"{generator.FullName}\", \"{generator.Assembly.GetName().Version}\")]");
        }
        else
        {
            code.AppendLine($"\t[System.CodeDom.Compiler.GeneratedCode(\"{generator.FullName}\", null)]");
        }
        code.AppendLine($"\t[Cave.Data.Table(\"{Layout.Name}\")]");
        code.AppendLine($"\tpublic partial struct {ClassName} : IEquatable<{ClassName}>, Cave.Data.ICanGetValues");
        code.AppendLine("\t{");

        #region static Parse()

        code.AppendLine($"\t\t/// <summary>Converts the string representation of a row to its {ClassName} equivalent.</summary>");
        code.AppendLine("\t\t/// <param name=\"data\">A string that contains a row to convert.</param>");
        code.AppendLine($"\t\t/// <returns>A new {ClassName} instance.</returns>");
        code.AppendLine($"\t\tpublic static {ClassName} Parse(string data) => Parse(data, System.Globalization.CultureInfo.InvariantCulture);");
        code.AppendLine();
        code.AppendLine($"\t\t/// <summary>Converts the string representation of a row to its {ClassName} equivalent.</summary>");
        code.AppendLine("\t\t/// <param name=\"data\">A string that contains a row to convert.</param>");
        code.AppendLine("\t\t/// <param name=\"provider\">The format provider (optional).</param>");
        code.AppendLine($"\t\t/// <returns>A new {ClassName} instance.</returns>");
        code.AppendLine($"\t\tpublic static {ClassName} Parse(string data, IFormatProvider provider) => Cave.Data.CsvReader.ParseRow<{ClassName}>(data, provider);");

        #endregion

        #region Add fields

        IEnumerable<IFieldProperties> fields = Layout;
        if (Options.FieldConverter is not null) fields = fields.Select(Options.FieldConverter);
        foreach (var field in fields)
        {
            code.AppendLine();
            code.AppendLine($"\t\t/// <summary>{field}</summary>");
            if (!string.IsNullOrEmpty(field.Description))
            {
                var description = HttpUtility.HtmlEncode(field.Description).ReplaceNewLine("<br/>");
                code.AppendLine($"\t\t/// <remarks>{description}</remarks>");
                code.AppendLine($"\t\t[System.ComponentModel.Description(\"{field.Description!.EscapeUtf8()}\")]");
            }

            code.Append("\t\t[Cave.Data.Field(");
            var fieldAttributeVariables = 0;

            void AddAttribute(Func<bool> test, Func<string> content)
            {
                if (!test()) return;
                if (fieldAttributeVariables++ > 0) code.Append(", ");
                code.Append(content());
            }

            if (field.Flags != 0)
            {
                code.Append("Flags = ");
                var flagCount = 0;
                foreach (var flag in field.Flags.GetFlags())
                {
                    if (flagCount++ > 0)
                    {
                        code.Append(" | ");
                    }

                    code.Append("Cave.Data.FieldFlags.");
                    code.Append(flag);
                }
                fieldAttributeVariables++;
            }

            var sharpName = fieldNameLookup[field.Index];
            if (sharpName != field.Name)
            {
                AddAttribute(() => field.Name != string.Empty, () => $"Name = \"{field.Name}\"");
            }

            if (field.MaximumLength < int.MaxValue)
            {
                AddAttribute(() => field.MaximumLength != 0, () => $"Length = {(int)field.MaximumLength}");
            }

            AddAttribute(() => field.AlternativeNames.Any(), () => $"AlternativeNames = \"{field.AlternativeNames.Join(", ")}\"");
            AddAttribute(() => field.DisplayFormat is not null, () => $"DisplayFormat = \"{field.DisplayFormat?.EscapeUtf8()}\"");
            code.AppendLine(")]");
            if ((field.DateTimeKind != DateTimeKind.Unspecified) || (field.DateTimeType != DateTimeType.Undefined))
            {
                code.AppendLine($"\t\t[Cave.Data.DateTimeFormat(DateTimeKind.{field.DateTimeKind}, Cave.Data.DateTimeType.{field.DateTimeType})]");
            }
            if (field.StringEncoding != 0)
            {
                code.AppendLine($"\t\t[Cave.Data.StringFormat(Cave.IO.StringEncoding.{field.StringEncoding})]");
            }

            var visibility = Options.FieldVisibility?.Invoke(field) ?? FieldVisibility.Public;
            var visibilityString = visibility.GetFlags().Join(" ").ToLowerInvariant();
            var typeName = (field.DataType == DataType.User ? field.ValueType?.FullName : null) ?? field.DotNetTypeName;
            if (field.IsNullable) typeName += "?";
            code.AppendLine($"\t\t{visibilityString} {typeName} {sharpName};");
        }

        #endregion

        #region ToString()
        {
            code.AppendLine();
            code.AppendLine("\t\t/// <summary>Gets a string representation of this row.</summary>");
            code.AppendLine("\t\t/// <returns>Returns a string that can be parsed by <see cref=\"Parse(string)\"/>.</returns>");
            code.AppendLine("\t\tpublic override string ToString() => ToString(System.Globalization.CultureInfo.InvariantCulture);");
            code.AppendLine();
            code.AppendLine("\t\t/// <summary>Gets a string representation of this row.</summary>");
            code.AppendLine("\t\t/// <returns>Returns a string that can be parsed by <see cref=\"Parse(string, System.IFormatProvider)\"/>.</returns>");
            code.AppendLine("\t\tpublic string ToString(System.IFormatProvider provider) => Cave.Data.CsvWriter.RowToString(this, provider);");
        }

        #endregion

        #region GetValues()
        {
            code.AppendLine();
            code.AppendLine("\t\t/// <summary>Gets an array containing the values of all fields of this row</summary>");
            code.AppendLine("\t\t/// <returns>Returns a new array instance.</returns>");
            var fieldNames = Layout.Fields.Select(f => fieldNameLookup[f.Index]).Join(", ");
            code.AppendLine($"\t\tpublic object?[] GetValues() => [{fieldNames}];");
        }
        #endregion

        #region GetHashCode()

        {
            code.AppendLine();

            if (Options.IdentifierHashCode && idCount == 1)
            {
                var idField = Layout.Identifier.First();
                var idFieldName = fieldNameLookup[idField.Index];
                code.AppendLine($"\t\t/// <summary>Gets the hash code for the identifier of this row (field {idFieldName}).</summary>");
                code.AppendLine("\t\t/// <returns>A hash code for the identifier of this row.</returns>");
                code.AppendLine($"\t\tpublic override int GetHashCode() => {idFieldName}.GetHashCode();");
            }
            else if (idCount > 0 && Options.IdentifierHashCode)
            {
                var names = idFields.Select(field => fieldNameLookup[field.Index]).Join(", ");
                code.AppendLine($"\t\t/// <summary>Gets the hash code for the identifiers of this row (fields {names}).</summary>");
                code.AppendLine("\t\t/// <remarks>Hashes are created using <see cref=\"Cave.DefaultHashingFunction\"/>. This is done because hashing in .net is not deterministic.");
                code.AppendLine("\t\t/// You can use your own hashing algorithm by changing <see cref=\"Cave.DefaultHashingFunction.Create\"/> to your own instance.</remarks>");
                code.AppendLine("\t\t/// <returns>A hash code for the identifiers of this row.</returns>");
                var idFieldNames = idFields.Select(f => fieldNameLookup[f.Index]).Join(", ");
                code.AppendLine($"\t\tpublic override int GetHashCode() => Cave.DefaultHashingFunction.Combine({idFieldNames});");
            }
            else
            {
                code.AppendLine("\t\t/// <summary>Gets the hash code based on all fields of this row.</summary>");
                code.AppendLine("\t\t/// <remarks>Hashes are created using <see cref=\"Cave.DefaultHashingFunction\"/>. This is done because hashing in .net is not deterministic.");
                code.AppendLine("\t\t/// You can use your own hashing algorithm by changing <see cref=\"Cave.DefaultHashingFunction.Create\"/> to your own instance.</remarks>");
                code.AppendLine("\t\t/// <returns>A hash code for all fields of this row.</returns>");
                code.AppendLine($"\t\tpublic override int GetHashCode() => Cave.DefaultHashingFunction.Calculate(GetValues());");
            }
        }

        #endregion

        #region Equals()

        {
            code.AppendLine();
            code.AppendLine("\t\t/// <inheritdoc/>");
            code.AppendLine($"\t\tpublic override bool Equals(object? other) => other is {ClassName} row && Equals(row);");
            code.AppendLine();
            code.AppendLine("\t\t/// <inheritdoc/>");
            code.AppendLine($"\t\tpublic bool Equals({ClassName} other)");
            code.AppendLine("\t\t{");
            code.AppendLine("\t\t\treturn");
            {
                var first = true;
                foreach (var field in Layout)
                {
                    if (first)
                    {
                        first = false;
                    }
                    else
                    {
                        code.AppendLine(" &&");
                    }

                    var name = fieldNameLookup[field.Index];
                    if (typeof(IEnumerable).IsAssignableFrom(field.ValueType))
                    {
                        code.Append($"\t\t\t\tCave.Collections.DefaultComparer.Equals(other.{name}, {name})");
                    }
                    else
                    {
                        code.Append($"\t\t\t\tobject.Equals(other.{name}, {name})");
                    }
                }

                code.AppendLine(";");
            }
            code.AppendLine("\t\t}");
        }

        #endregion

        code.AppendLine("\t}");
        code.AppendLine("}");
        code.Replace("\t", "    ");
        return new()
        {
            ClassName = ClassName,
            TableName = TableName,
            DatabaseName = DatabaseName,
            Code = code.ToString()
        };
    }

    /// <summary>Builds the csharp code file containing the row layout structure.</summary>
    /// <returns>Returns the generated code.</returns>
    public GenerateTableCodeResult GenerateStructFile(string? structFileName = null)
    {
        var result = GenerateStruct();
        if (result.FileName == null)
        {
            if (structFileName == null)
            {
                result.FileName = result.ClassName + ".cs";
            }
            else
            {
                result.FileName = structFileName;
            }
        }
        return SaveStructFile(result);
    }

    /// <summary>Saves the generated code to a file and returns the updated result.</summary>
    /// <param name="result">Result to update.</param>
    /// <returns>Returns the generated code.</returns>
    public GenerateTableCodeResult SaveStructFile(GenerateTableCodeResult result)
    {
        result.FileName ??= result.ClassName + ".cs";
        result.FileName = Path.Combine(Options.OutputDirectory, result.FileName);
        File.WriteAllText(result.FileName, result.Code);
        return result;
    }

    #endregion Public Methods
}
