using System;
using System.IO;
using System.Linq;
using System.Text;
using Cave.Collections.Generic;

namespace Cave.Data
{
    /// <summary>
    /// Code generator for IDatabase instances.
    /// </summary>
    public class DatabaseInterfaceGenerator
    {
        Set<TableInfo> tables = new Set<TableInfo>();
        string codeHeader;
        string codeFooter;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseInterfaceGenerator"/> class.
        /// </summary>
        /// <param name="database">Database to use.</param>
        /// <param name="className">Name of the class to generate (optional).</param>
        public DatabaseInterfaceGenerator(IDatabase database, string className = null)
        {
            this.Database = database;
            this.ClassName = className ?? GetName(database.Name) + "Db";

            StringBuilder code = new StringBuilder();

            code.AppendLine("//-----------------------------------------------------------------------");
            code.AppendLine("// <summary>");
            code.AppendLine($"// Autogenerated table class {DateTime.UtcNow.ToString("R")}");
            code.AppendLine($"// Using {typeof(DatabaseInterfaceGenerator).Assembly.FullName}");
            code.AppendLine("// </summary>");
            code.AppendLine("// <auto-generated />");
            code.AppendLine("//-----------------------------------------------------------------------");
            code.AppendLine();
            code.AppendLine("using System;");
            code.AppendLine("using System.Globalization;");
            code.AppendLine("using Cave.Data;");

            code.AppendLine();
            code.AppendLine("namespace Database");
            code.AppendLine("{");
            code.AppendLine($"\t/// <summary>Provides access to table structures for database {database.Name}.</summary>");
            code.AppendLine($"\tpublic static partial class {this.ClassName}");
            code.AppendLine("\t{");
            code.AppendLine("\t\tstatic IDatabase database;");
            code.AppendLine();
            code.AppendLine("\t\t/// <summary>Gets the used database instance.</summary>");
            code.AppendLine("\t\tpublic static IDatabase Database => database;");
            code.AppendLine();
            code.AppendLine($"\t\t/// <summary>Connects to the {database.Name} database.</summary>");
            code.AppendLine("\t\t/// <param name=\"storage\">IStorage instance to use.</param>");
            code.AppendLine("\t\tpublic static void Connect(IStorage storage)");
            code.AppendLine("\t\t{");
            code.AppendLine("\t\t\tif (database == null)");
            code.AppendLine("\t\t\t{");
            code.AppendLine($"\t\t\t\tdatabase = storage.GetDatabase(\"{database.Name}\");");
            code.AppendLine("\t\t\t}");
            code.AppendLine("\t\t}");

            codeHeader = code.ToString();

            code = new StringBuilder();

            code.AppendLine("\t}");
            code.AppendLine("}");

            codeFooter = code.ToString();
        }

        /// <summary>
        /// Gets the used database instance.
        /// </summary>
        public IDatabase Database { get; }

        /// <summary>
        /// Gets the name of the generated class.
        /// </summary>
        public string ClassName { get; }

        /// <summary>
        /// Adds a table to the code.
        /// </summary>
        /// <param name="table">The table to add.</param>
        /// <param name="className">Name of the (table) class to use (optional).</param>
        /// <param name="getterName">Name of the getter in the resulting class (optional).</param>
        public void Add(ITable table, string className = null, string getterName = null)
        {
            if (Database != table.Database)
            {
                throw new ArgumentOutOfRangeException(nameof(table), "Database has to match!");
            }
            Add(tableName: table.Name, className: className, getterName: getterName);
        }

        /// <summary>
        /// Adds a table to the code.
        /// </summary>
        /// <param name="tableCodeResult">The table to add.</param>
        /// <param name="getterName">Name of the getter in the resulting class (optional).</param>
        public void Add(GenerateTableCodeResult tableCodeResult, string getterName = null)
        {
            Add(className: tableCodeResult.ClassName, tableName: tableCodeResult.TableName, getterName: getterName);
        }

        /// <summary>
        /// Adds a table to the code.
        /// </summary>
        /// <param name="tableName">Name of the table at the database.</param>
        /// <param name="className">Name of the (table) class to use.</param>
        /// <param name="getterName">Name of the getter in the resulting class (optional).</param>
        public void Add(string tableName, string className = null, string getterName = null)
        {
            tables.Add(new TableInfo()
            {
                TableName = tableName ?? throw new ArgumentNullException(nameof(tableName)),
                ClassName = className ?? GetName(Database.Name) + GetName(tableName) + "Row",
                GetterName = getterName ?? GetName(tableName),
            });
        }

        /// <summary>
        /// Generates the interface code.
        /// </summary>
        /// <returns>Returns c# code.</returns>
        public string Generate()
        {
            StringBuilder result = new StringBuilder();
            result.Append(codeHeader);
            foreach (var table in tables)
            {
                result.AppendLine();
                result.AppendLine($"\t\t/// <summary>Gets a new ITable<{table.ClassName}> instance for accessing the <c>{table.TableName}</c> table.</summary>");
                result.AppendLine($"\t\tpublic static ITable<{table.ClassName}> {table.GetterName} => new Table<{table.ClassName}>(database[\"{table.TableName}\"]);");
            }
            result.Append(codeFooter);
            return result.ToString();
        }

        /// <summary>
        /// Saves the output of <see cref="Generate"/> to the specified filename.
        /// </summary>
        /// <param name="fileName">Filename to save to.</param>
        public void Save(string fileName = null)
        {
            if (fileName == null)
            {
                fileName = ClassName + ".cs";
            }
            File.WriteAllText(fileName, Generate());
        }

        string GetName(string text)
        {
            text = text.ReplaceInvalidChars(ASCII.Strings.Letters + ASCII.Strings.Digits, "_");
            var parts = text.Split('_').SelectMany(s => s.SplitCamelCase());
            return parts.ToArray().JoinCamelCase();
        }

        class TableInfo
        {
            public string TableName { get; set; }
            public string ClassName { get; set; }
            public string GetterName { get; set; }
            public override bool Equals(object obj)
            {
                if (obj is TableInfo other)
                {
                    // intentionally using or to check for duplicates
                    return
                        other.TableName == TableName ||
                        other.ClassName == ClassName ||
                        other.GetterName == GetterName;
                }
                return false;
            }
            public override int GetHashCode() => TableName.GetHashCode();
        }
    }
}
